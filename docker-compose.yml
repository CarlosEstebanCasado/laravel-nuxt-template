version: "3.9"

networks:
  internal:
    driver: bridge

volumes:
  pg_data:
  redis_data:
  minio_data:
  meili_data:
  nuxt_node_modules:

services:
  nginx:
    image: nginx:1.27-alpine
    container_name: gateway
    depends_on:
      - api
      - nuxt
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/certs:/etc/nginx/certs:ro
      - ./apps/api:/var/www/html:ro
    networks:
      - internal

  api:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: api
    depends_on:
      - postgres
      - redis
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_URL: https://api.project.dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      QUEUE_CONNECTION: redis
      CACHE_DRIVER: redis
      SESSION_DRIVER: cookie
    volumes:
      - ./apps/api:/var/www/html
    networks:
      - internal
    healthcheck:
      test: ["CMD", "php", "-r", "exit(extension_loaded('pdo_pgsql') ? 0 : 1);"]
      interval: 30s
      timeout: 5s
      retries: 5

  queue:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: queue
    command: php artisan queue:work --tries=3 --backoff=5
    depends_on:
      - api
      - redis
    volumes:
      - ./apps/api:/var/www/html
    networks:
      - internal

  horizon:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: horizon
    command: php artisan horizon
    depends_on:
      - api
      - redis
    volumes:
      - ./apps/api:/var/www/html
    networks:
      - internal

  scheduler:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: scheduler
    command: sh -lc "while :; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"
    depends_on:
      - api
    volumes:
      - ./apps/api:/var/www/html
    networks:
      - internal

  nuxt:
    build:
      context: .
      dockerfile: docker/nuxt/Dockerfile
    container_name: nuxt
    environment:
      NITRO_PORT: 3000
      NUXT_PUBLIC_API_BASE: https://api.project.dev/api/v1
      NUXT_PUBLIC_APP_BASE_URL: https://app.project.dev
    volumes:
      - ./apps/app:/usr/src/app
      - nuxt_node_modules:/usr/src/app/node_modules
    expose:
      - "3000"
    networks:
      - internal

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internal

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --save "" --appendonly no
    volumes:
      - redis_data:/data
    networks:
      - internal

  meilisearch:
    image: getmeili/meilisearch:v1.9
    container_name: meilisearch
    environment:
      MEILI_ENV: development
    volumes:
      - meili_data:/meili_data
    networks:
      - internal

  minio:
    image: minio/minio:RELEASE.2024-10-02T09-19-41Z
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - internal

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "8025:8025"
    networks:
      - internal
